< git 환경설정 >
$ git --version
$ git config --global --list

$ git config --global user.name '사용자 이름(git_hub 회원가입 이름'
$ git config --global user.email '사용자 이메일(git_hub 회원가입 이름'
$ git config --global core.autocrlf true    :: 개행문자 정의

< git verwion 시작 >
$ git init                       :: 버전 관리를 시작 하겠다
                                  git bransch가 msater 인지 확인

$ git status                     :: git 상태 확인

                                  No commits yet   - 아직 버전 관리를 시작하지 않았다
                                  Untracked files: - 현재 추적하고 있지 않은 파일 표시

$ git add .                      :: 해당 폴더의 전체 버전 관리 준비
                                  전체 파일과 폴더 추적
$ git add index.html             ::  파일 1개만 관리


$ git commit -m '프로젝트 생성'   :: 메세지 추가
                                  commit -- 버전을 추적 하겠다
                                  -m      -- 메세지 관리

$ git log                         :: commit 내역 조회

< 내용 수정후 >
$ git status                      :: 파일들이 modify 되었다는것을 확인할수 있음
$ git add .                       :: 
$ git status                      :: Changes to be committed: 변경사항이 있고 commit헐 준비가 되었다.
                                   modify 글자색이 적생에서 초록색으로 변경
$ git commit -m '타이틀 태그 수정'
$ git log                         :: 현재 버전은 무엇이냐 확인 가능 ( (HEAD -> master) )
                                   HEAD -> MASTER 현재 버전이 MASTER 이라는 것을 확인

< 브랜치 생성/삭제/이동 >
* master branch는 보수적으로 관리가 필요
< brandch 생성 >
$ git branch add-style             :: add-style  라는 이름으 branch 생성
$ git branch                       :: 관리되고 있는 brans 조회됨.
                                    $ git branch 
                                      add-style
                                    * master
$ git checkout add-style           :: branch  add-style 로 변경
                                    Switched to branch 'add-style'  
$ git branch                       :: branch가 add-style 로 변경되었음을 확인함
                                    $ git branch
                                    * add-style
                                      master

< branch add-style 상태애서 main.css 생성 >
* main.css 생성 추가후 index.html 에 css 적용 수정후

$ git add .                        :: 적색의 수정파일과 신규 파일을 초록으로 변경
$ git status
$ git commit -m '스타일 추가'

$ git add .                        :: 적색의 수정파일과 신규 파일을 초록으로 변경
$ git status
$ git commit -m '스타일 추가1'

< 05_branch 생성 삭제 >
$ git branch                       :: * add-style 상태
$ git checkout master              :: branch master 로 이동
  Switched to branch 'master'
$ git branch remove-this           :: branch remove-this 생성
$ git checkout remove-this         :: branch remove-this 로 이동
  Switched to branch 'remove-this'
$ git branch                       :: * remove-this 상태
$ git branch -d remove-this        
  error: Cannot delete branch 'remove-this' checked out at 'C:/python_fast'
$ git checkout master
  Switched to branch 'master'
$ git branch                       :: * master
$ git branch -d remove-this
  Deleted branch remove-this (was 716b584).

< 05_branch 생성과 동시에 이동 >  
$ git checkout -b abc
  Switched to a new branch 'abc'
$ git branch                       :: * abc  
$ git checkout add-style
  Switched to branch 'add-style'

$ git status
$ git add .                        :: 적색의 수정파일과 신규 파일을 초록으로 변경
$ git status
$ git commit -m '스타일 추가2'

$ git status
$ git add .                        :: 적색의 수정파일과 신규 파일을 초록으로 변경
$ git status
$ git commit -m '스타일 추가3'

< 06_branch 병합 >
$ git checkout master
  Switched to branch 'master'

$ git checkout abc
  Switched to branch 'abc'

$ git merge add-style
  Updating 716b584..8fcbb07
  Fast-forward
   git_test/git_document.txt | 97 +++++++++++++++++++++++++++++++++++++++++------
   git_test/index.html       |  3 +-
   git_test/main.css         |  3 ++
   3 files changed, 90 insertions(+), 13 deletions(-)
   create mode 100644 git_test/main.css

< merge 후 index 수정 >
$ git add .
$ git commit -m 'ABC!'
$ git checkout add-style
  Switched to branch 'add-style'
$ git commit -m 'ADD STYLE??'
  [add-style 6b46373] ADD STYLE??
   1 file changed, 1 insertion(+), 1 deletion(-)
$ git checkout abc
  Switched to branch 'abc'

< 06_branch 충동 발생 >
$ git merge add-style
  Auto-merging git_test/index.html
  CONFLICT (content): Merge conflict in git_test/index.html
  Automatic merge failed; fix conflicts and then commit the result.  

  * 현재변경사항 수락     Accept Current Change
  * 수신변경사항 수락     Accept Incomeing Change
  * 두변경사항 모두 두락  Accept Both Changes
  * 변경사항 비교         Compare Changes

< 07_이전버전 되돌리기 >
$ git checkout master
  Switched to branch 'master'
$ git status

$ git commit -m '1번'  :: index.html 파일 내용을 1번으로 수정

$ git commit -m '2번'  :: index.html 파일 내용을 2번으로 수정

$ git commit -m '3번'  :: index.html 파일 내용을 3번으로 수정
$ git status
$ git log

$ git reset --hard HEAD~      :: 바로 이전버전으로 살려짐 ( 2번으로 )
  HEAD is now at dd2643e 2

$ git log       

$ git reset --hard ORIG_HEAD  :: 삭제 이전 버전으로 살려짐 ( 3번으로 )
  HEAD is now at dcc5403 3

$ git log       :: 3번 버전 되살려짐, 최신버전으로 살려짐

$ git reset --hard HEAD~3            :: 최근 1번째로 되살려짐
  HEAD is now at e748e88 git_doc 최신2

$ git log
commit e748e88fd16c95cd9e7ca0dcb216a871fed8bcbc (HEAD -> master)
Author: hongcs <00050004@naver.com>
Date:   Sat Feb 26 14:19:09 2022 +0900

    git_doc 최신2

$ git resert --hard e748e88fd16c95cd9e7ca0dcb216a871fed8bcbc
  git: 'resert' is not a git command. See 'git --help'.

  The most similar command is
        revert

< git server upload >
https://github.com/hongcs/git_test.git

$ git status
  On branch master
  nothing to commit, working tree clean

  USER@LAPTOP-KTDEF5E5 MINGW64 /c/python_fast (master)
$ git remote add git_test https://github.com/hongcs/git_test.git    :: git_test _ alise 명

  USER@LAPTOP-KTDEF5E5 MINGW64 /c/python_fast (master)

$ git remote -v  :: remote 상태 보기
  git_test        https://github.com/hongcs/git_test.git (fetch)
  git_test        https://github.com/hongcs/git_test.git (push)

$ git push git_test master
  info: please complete authentication in your browser...
  Enumerating objects: 67, done.
  Counting objects: 100% (67/67), done.
  Delta compression using up to 8 threads
  Compressing objects: 100% (53/53), done.
  Writing objects: 100% (67/67), 8.73 KiB | 558.00 KiB/s, done.
  Total 67 (delta 19), reused 0 (delta 0), pack-reused 0
  remote: Resolving deltas: 100% (19/19), done.
  To https://github.com/hongcs/git_test.git
   * [new branch]      master -> master

  USER@LAPTOP-KTDEF5E5 MINGW64 /c/python_fast (master)


$ git checkout add-style
$ git push git_test add-style
$ 
$ git push git_test --all    :: 모든 branch 가 올라감
--------------------------------------------------------------
< 참고 youtube >
: https://www.youtube.com/watch?v=lelVripbt2M
  https://www.youtube.com/watch?v=cwC8t9dno2s
--------------------------------------------------------------
< git down 받기 - freshman >
1. master 신규소스 생성후 github에 소스 upload
   $ git push origin master
2. github에서 소스를 down 받는다
   $ git clone git주소 freshman :: git clone git주소 폴더명
   cd freshman
   code .     :: enter
3. freshman 소스 수정후 github에 push
   freshman 소스 수정후 freshman branch 생성후 소스 upload
   $ git checkout -b freshman  :: freshman branch 생성후 branch 이동 
   $ git push origin freshman  :: branch상태가 freshman

4. freshman은 github에서 'comoare & pull request' 클릭
   메세지 입력후 'create pull request' 클릭
5. github에서 pull request 에 숫자 나타남 - master에 병합해 달라는 요청
6. github에서 내용 확인후 'merge pull request' 클릭
   merged라고 나타남 ( frshmans 소스와 master소스가 합처짐 )

7. 시니어 사원은 github 소스 받아 와서 본인 소스와 머지한다.
   동기화 작업
   시니어 소스 저장   
   $ git add .
   $ git commit -m 'merge하기위한 준비'

   $ git pull origin master   :: github master branch에서 소스 받아옴
                                 동기화 작업 진행됨.
8. 소스 머지가 확인이 되면 github master에 upload
   $ git push origin master   :: github master에 upload 



